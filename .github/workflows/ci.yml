name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'NetThrottler.sln'
  ARTIFACTS_DIR: './artifacts'
  TEST_RESULTS_DIR: './test-results'
  COVERAGE_DIR: './coverage'

jobs:
  # 🔍 Code Quality & Security
  quality-check:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: 🔨 Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

    - name: 🧹 Format check
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: 🔒 Security scan with Snyk
      uses: snyk/actions/dotnet@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: 📊 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # 🧪 Test Suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        dotnet-version: ['7.0.x', '8.0.x']
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          - os: windows-latest
            dotnet-version: '7.0.x'
          - os: macos-latest
            dotnet-version: '7.0.x'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: netthrottler_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: 📦 Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: 🔨 Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

    - name: 🧪 Run unit tests
      run: |
        dotnet test ${{ env.SOLUTION_FILE }} \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --logger trx \
          --results-directory ${{ env.TEST_RESULTS_DIR }} \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

    - name: 🚀 Run performance tests
      run: |
        dotnet test tests/NetThrottler.Performance.Tests/ \
          --configuration Release \
          --no-build \
          --logger trx \
          --results-directory ${{ env.TEST_RESULTS_DIR }}/performance

    - name: 📊 Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (${{ matrix.dotnet-version }} - ${{ matrix.os }})
        path: ${{ env.TEST_RESULTS_DIR }}/**/*.trx
        reporter: dotnet-trx
        fail-on-error: true

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.dotnet-version == '8.0.x'
      with:
        files: ${{ env.TEST_RESULTS_DIR }}/**/coverage.cobertura.xml
        flags: unittests,integration,performance
        name: codecov-${{ matrix.os }}-${{ matrix.dotnet-version }}
        fail_ci_if_error: false

    - name: 📋 Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.dotnet-version }}
        path: ${{ env.TEST_RESULTS_DIR }}

  # 📦 Package & Publish
  package:
    name: 📦 Package & Publish
    runs-on: ubuntu-latest
    needs: [quality-check, test]
    timeout-minutes: 20

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: 🏗️ Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

    - name: 📦 Pack NuGet packages
      run: |
        dotnet pack ${{ env.SOLUTION_FILE }} \
          --configuration Release \
          --no-build \
          --output ${{ env.ARTIFACTS_DIR }} \
          --include-symbols \
          --include-source \
          -p:PackageVersion=${{ github.ref_name || '1.0.0' }} \
          -p:AssemblyVersion=${{ github.ref_name || '1.0.0' }} \
          -p:FileVersion=${{ github.ref_name || '1.0.0' }}

    - name: 📤 Upload packages
      uses: actions/upload-artifact@v3
      with:
        name: nuget-packages
        path: ${{ env.ARTIFACTS_DIR }}/*.nupkg

    - name: 🏷️ Generate release notes
      if: startsWith(github.ref, 'refs/tags/')
      id: release_notes
      run: |
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "## 🚀 NetThrottler ${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### ✨ Features" >> $GITHUB_OUTPUT
        echo "- Advanced rate limiting algorithms" >> $GITHUB_OUTPUT
        echo "- ASP.NET Core middleware integration" >> $GITHUB_OUTPUT
        echo "- Redis and SQL Server support" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 📦 Packages" >> $GITHUB_OUTPUT
        ls ${{ env.ARTIFACTS_DIR }}/*.nupkg | sed 's/.*\//- /' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # 🌐 Deploy to NuGet
  deploy-nuget:
    name: 🌐 Deploy to NuGet
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    timeout-minutes: 15

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download packages
      uses: actions/download-artifact@v3
      with:
        name: nuget-packages
        path: ${{ env.ARTIFACTS_DIR }}

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🌐 Publish to NuGet
      run: |
        for package in ${{ env.ARTIFACTS_DIR }}/*.nupkg; do
          echo "📦 Publishing $package to NuGet..."
          dotnet nuget push "$package" \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json \
            --skip-duplicate
        done

    - name: 🎉 Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: NetThrottler ${{ github.ref_name }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false

  # 🚀 Performance Benchmark
  benchmark:
    name: 🚀 Performance Benchmark
    runs-on: ubuntu-latest
    needs: package
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 45

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: 🏗️ Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore

    - name: 🚀 Run benchmarks
      run: |
        dotnet run --project tests/NetThrottler.Performance.Tests/ \
          --configuration Release \
          --no-build \
          -- --exporters Json --artifacts ${{ env.ARTIFACTS_DIR }}/benchmarks

    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: ${{ env.ARTIFACTS_DIR }}/benchmarks

  # 🔍 Dependency Review
  dependency-review:
    name: 🔍 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Dependency Review
      uses: actions/dependency-review-action@v3

  # 🧹 Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-nuget, benchmark]
    if: always()

    steps:
    - name: 🗑️ Delete old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          const artifactNames = artifacts.data.artifacts
            .filter(artifact => artifact.expired === false)
            .map(artifact => artifact.name);
          
          console.log(`Found ${artifactNames.length} artifacts to clean up`);